{"version":3,"file":"static/js/803.9b517ea8.chunk.js","mappings":"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","sources":["layout/main/profile/Profile.module.css","webpack://samurai-way/./src/layout/main/profile/profileInfo/ProfileInfo.module.css?2ad6","layout/main/profile/profileInfo/ProfileStatusWiyhHooks.tsx","layout/main/profile/profileInfo/ProfileDataForm.tsx","layout/main/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/layout/main/profile/myPosts/MyPosts.module.css?6aa5","webpack://samurai-way/./src/layout/main/profile/myPosts/post/Post.module.css?004b","layout/main/profile/myPosts/post/Post.tsx","layout/main/profile/myPosts/MyPosts.tsx","layout/main/profile/myPosts/MyPostsContainer.tsx","layout/main/profile/Profile.tsx","layout/main/profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__F6H+d\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__gp86+\",\"profilePhoto\":\"ProfileInfo_profilePhoto__giXiE\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__BdY2B\",\"header\":\"ProfileInfo_header__t-mlf\",\"mainPhoto\":\"ProfileInfo_mainPhoto__LRHSO\",\"contact\":\"ProfileInfo_contact__C09Gp\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype Props = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: Props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        autoFocus={true}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n","import {ProfileContactsType, ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileDataForm = ({profile}: Props) => {\r\n    return (\r\n        <form>\r\n            {/*<div>*/}\r\n            {/*    <button onClick={goToEditMode}>save</button>*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <b>Full name</b>: {profile.fullName}*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}*/}\r\n            {/*</div>*/}\r\n            {/*{profile.lookingForAJob &&*/}\r\n            {/*    <div>*/}\r\n            {/*        <b>My professional skills</b>: {profile.lookingForAJobDescription}*/}\r\n            {/*    </div>*/}\r\n            {/*}*/}\r\n            {/*<div>*/}\r\n            {/*    <b>About me</b>: {profile.aboutMe}*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <b>Contacts</b>: {Object.keys(profile.contacts).map((key: string) => {*/}\r\n            {/*    return <Contact*/}\r\n            {/*        key={key}*/}\r\n            {/*        contactTitle={key}*/}\r\n            {/*        contactValue={profile.contacts[key as keyof ProfileContactsType]}*/}\r\n            {/*    />*/}\r\n            {/*})}*/}\r\n            {/*</div>*/}\r\n        </form>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport photo from '../../../../assets/images/leaves-1350175_1920.jpg'\r\nimport {ProfileContactsType, ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../../components/preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWiyhHooks\";\r\nimport userPhoto from \"../../../../assets/images/avatar4.png\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void;\r\n}\r\n\r\ntype InfoItem = {\r\n    id: string\r\n    title: string\r\n    value: string | null | boolean\r\n}\r\n\r\ntype Info = Array<InfoItem>\r\n\r\nexport const ProfileInfo = (props: Props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    //если props.profile==null || props.profile==undefined-сокращенно:\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    // const info: Info = [\r\n    //     {id: v1(), title: 'About me: ', value: props.profile.aboutMe},\r\n    //     {id: v1(), title: 'Full name: ', value: props.profile.fullName},\r\n    //     {id: v1(), title: 'Looking for a job description: ', value: props.profile.lookingForAJobDescription},\r\n    //     {id: v1(), title: 'Contacts: ', value: ''},\r\n    //     {id: v1(), title: 'Facebook: ', value: props.profile.contacts.facebook},\r\n    //     {id: v1(), title: 'Github: ', value: props.profile.contacts.github},\r\n    //     {id: v1(), title: 'Twitter: ', value: props.profile.contacts.twitter},\r\n    //     {id: v1(), title: 'Instagram: ', value: props.profile.contacts.instagram},\r\n    //     {id: v1(), title: 'VK: ', value: props.profile.contacts.vk},\r\n    //     {id: v1(), title: 'Youtube: ', value: props.profile.contacts.youtube},\r\n    //     {id: v1(), title: 'Website: ', value: props.profile.contacts.website},\r\n    //     {id: v1(), title: 'Main link: ', value: props.profile.contacts.mainLink},\r\n    //     {id: v1(), title: 'Looking for a job: ', value: props.profile.lookingForAJob}\r\n    // ];\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.profilePhoto}>\r\n                <img src={photo} alt=\"Photo\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto}\r\n                     alt=\"avatar\"\r\n                     className={s.mainPhoto}\r\n                />\r\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode ? <ProfileDataForm profile={props.profile}/> :\r\n                    <ProfileData\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n                        goToEditMode={() => {setEditMode(true)}}/>}\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                {/*{info.map(el =>*/}\r\n                {/*    <div key={el.id}>*/}\r\n                {/*        <span className={s.header}>{el.title}</span>{el.value}*/}\r\n                {/*    </div>)}*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ContactProps = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataProps) => {\r\n\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map((key: string) => {\r\n                return <Contact\r\n                    key={key}\r\n                    contactTitle={key}\r\n                    contactValue={profile.contacts[key as keyof ProfileContactsType]}\r\n                />\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactProps) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__nmRx3\",\"postsTitle\":\"MyPosts_postsTitle__yUp3G\",\"postWrapper\":\"MyPosts_postWrapper__Na3HO\",\"posts\":\"MyPosts_posts__KwDaJ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rqBl2\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://i.pinimg.com/564x/1e/d3/0d/1ed30d98f49be532ae58c62f33677b16.jpg\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './post/Post'\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../components/common/FormsControls/FormsControls\";\r\n\r\n//Презентационные компоненты занимаются отображением UI.\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = { newPostText: string }\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form className={s.postWrapper} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={\"Post message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n\r\nexport const MyPosts = memo((props : MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(el =>\r\n        <Post key={el.id} message={el.message} likesCount={el.likesCount}/>)\r\n\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addNewPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className={s.postsTitle}>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {\r\n    addPostAC,\r\n    addPostActionType,\r\n    PostType\r\n} from \"../../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//Контейнерные компоненты занимаются управлением состоянием и логикой.\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<addPostActionType>): MapDispatchToPropsType => {\r\n    return {\r\n        addNewPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./myPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype Props = {\r\n    profile: ProfileType/* | null*/\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void;\r\n}\r\n\r\nexport const Profile: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, ProfileType, savePhotoTC, updateStatusTC} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MatchParams = {\r\n    userId: string;\r\n}\r\n\r\nexport class ProfileContainer extends React.Component<ProfileContainerPropsType & RouteComponentProps<MatchParams>> {\r\n\r\n    refreshProfile() {\r\n        // userId - который в url\r\n        let userId: number | null = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    // все сайд-эффекты делаются в методе жизненного цикла - componentDidMount():\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileContainerPropsType & RouteComponentProps<MatchParams>, prevState: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        savePhoto={this.props.savePhoto}\r\n        />\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType/* | null*/\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void;\r\n}\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getUserStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n    }),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataForm","profile","ProfileInfo","Preloader","className","s","src","photo","alt","photos","large","userPhoto","isOwner","type","target","files","length","savePhoto","ProfileData","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","Post","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPosts","memo","postsElements","posts","el","id","values","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","savePhotoTC","withRouter"],"sourceRoot":""}