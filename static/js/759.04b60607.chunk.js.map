{"version":3,"file":"static/js/759.04b60607.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/layout/main/profile/Profile.module.css?b160","webpack://samurai-way/./src/layout/main/profile/profileInfo/ProfileInfo.module.css?2ad6","layout/main/profile/profileInfo/ProfileStatusWiyhHooks.tsx","webpack://samurai-way/./src/layout/main/profile/profileInfo/ProfileDataForm/ProfileDataForm.module.css?0c7d","layout/main/profile/profileInfo/ProfileDataForm/ProfileDataForm.tsx","layout/main/profile/profileInfo/ProfileData/ProfileData.tsx","layout/main/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/layout/main/profile/myPosts/MyPosts.module.css?6aa5","webpack://samurai-way/./src/layout/main/profile/myPosts/post/Post.module.css?004b","layout/main/profile/myPosts/post/Post.tsx","layout/main/profile/myPosts/MyPosts.tsx","layout/main/profile/myPosts/MyPostsContainer.tsx","layout/main/profile/Profile.tsx","webpack://samurai-way/./src/layout/main/profile/profileContainer/ProfileContainer.module.css?cbd2","layout/main/profile/profileContainer/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__F6H+d\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__gp86+\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__BdY2B\",\"photoContainer\":\"ProfileInfo_photoContainer__DNbS4\",\"header\":\"ProfileInfo_header__t-mlf\",\"mainPhoto\":\"ProfileInfo_mainPhoto__LRHSO\",\"contact\":\"ProfileInfo_contact__C09Gp\",\"data\":\"ProfileInfo_data__SnZBI\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype Props = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: Props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        autoFocus={true}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ProfileDataForm_contact__ucZrs\"};","import {ProfileType} from \"../../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {Input, Textarea} from \"../../../../../components/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormDataType} from \"../../../../../components/Login/Login\";\r\nimport s from './ProfileDataForm.module.css'\r\nimport style from \"../../../../../components/common/FormsControls/FormsControls.module.css\";\r\n\r\ntype Props = {\r\n    initialValues: ProfileType\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<Props & InjectedFormProps<FormDataType, Props>> = (props) => {\r\n    const {initialValues, profile, handleSubmit, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button type={\"submit\"}>save</button>\r\n                {error}\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: <Field\r\n                placeholder={\"Full name\"}\r\n                validate={[required]}\r\n                name={\"fullName\"}\r\n                component={Input}\r\n            />\r\n            </div>\r\n            <div>\r\n                <div>Looking for a job:</div>\r\n                <Field\r\n                    type={\"checkbox\"}\r\n                    name={\"lookingForAJob\"}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                <Field\r\n                    component={Textarea}\r\n                    validate={[maxLengthCreator(50)]}\r\n                    name=\"lookingForAJobDescription\"\r\n                    placeholder=\"My professional skills\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                <Field\r\n                    component={Textarea}\r\n                    validate={[maxLengthCreator(50)]}\r\n                    name=\"aboutMe\"\r\n                    placeholder=\"About me\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <span>Contacts:</span> {Object.keys(profile.contacts).map((key: string) => {\r\n                return (\r\n                    <div key={key} className={s.contact}>\r\n                        <b>{key}</b>: <Field\r\n                        placeholder={key}\r\n                        validate={[maxLengthCreator(50)]}\r\n                        name={\"contacts.\" + key}\r\n                        component={Input}\r\n                    />\r\n                    </div>)\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<FormDataType, Props>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n","import s from \"../ProfileInfo.module.css\";\r\nimport {ProfileContactsType, ProfileType} from \"../../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\n\r\ntype ContactProps = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataProps) => {\r\n\r\n    return (\r\n        <div className={s.data}>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <span>Full name:</span> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <span>Looking for a job:</span> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <span>My professional skills:</span> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <span>About me:</span> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <span>Contacts:</span> {Object.keys(profile.contacts).map((key: string) => {\r\n                return <Contact\r\n                    key={key}\r\n                    contactTitle={key}\r\n                    contactValue={profile.contacts[key as keyof ProfileContactsType]}\r\n                />\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactProps) => {\r\n    return <div className={s.contact}><span>{contactTitle}:</span> {contactValue}</div>\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../../components/preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWiyhHooks\";\r\nimport userPhoto from \"../../../../assets/images/avatar4.png\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {FormDataType} from \"../../../../components/Login/Login\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\ntype InfoItem = {\r\n    id: string\r\n    title: string\r\n    value: string | null | boolean\r\n}\r\n\r\ntype Info = Array<InfoItem>\r\n\r\nexport const ProfileInfo = (props: Props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    //если props.profile==null || props.profile==undefined-сокращенно:\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            {/*<div className={s.profilePhoto}>*/}\r\n            {/*    <img src={photo} alt=\"Photo\"/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.photoContainer}>\r\n                    <img src={props.profile.photos.large || userPhoto}\r\n                         alt=\"avatar\"\r\n                         className={s.mainPhoto}\r\n                    />\r\n                    {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n\r\n                {editMode ?\r\n                    <ProfileDataFormReduxForm\r\n                        initialValues={props.profile}\r\n                        profile={props.profile}\r\n                        onSubmit={onSubmit}\r\n                    /> :\r\n                    <ProfileData\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}/>}\r\n\r\n\r\n                {/*{info.map(el =>*/}\r\n                {/*    <div key={el.id}>*/}\r\n                {/*        <span className={s.header}>{el.title}</span>{el.value}*/}\r\n                {/*    </div>)}*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__nmRx3\",\"postsTitle\":\"MyPosts_postsTitle__yUp3G\",\"postWrapper\":\"MyPosts_postWrapper__Na3HO\",\"posts\":\"MyPosts_posts__KwDaJ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rqBl2\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://i.pinimg.com/564x/1e/d3/0d/1ed30d98f49be532ae58c62f33677b16.jpg\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './post/Post'\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../components/common/FormsControls/FormsControls\";\r\n\r\n//Презентационные компоненты занимаются отображением UI.\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = { newPostText: string }\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form className={s.postWrapper} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={\"Post message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n\r\nexport const MyPosts = memo((props : MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(el =>\r\n        <Post key={el.id} message={el.message} likesCount={el.likesCount}/>)\r\n\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addNewPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className={s.postsTitle}>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {\r\n    addPostAC,\r\n    addPostActionType,\r\n    PostType\r\n} from \"../../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//Контейнерные компоненты занимаются управлением состоянием и логикой.\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<addPostActionType>): MapDispatchToPropsType => {\r\n    return {\r\n        addNewPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./myPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {FormDataType} from \"../../../components/Login/Login\";\r\n\r\ntype Props = {\r\n    profile: ProfileType/* | null*/\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\nexport const Profile: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"ProfileContainer_profileContainer__DOv-C\",\"profilePhoto\":\"ProfileContainer_profilePhoto__PBbxt\"};","import React from 'react';\r\nimport {Profile} from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfileType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    updateStatusTC\r\n} from \"../../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport s from \"./ProfileContainer.module.css\";\r\nimport photo from \"../../../../assets/images/leaves-1350175_1920.jpg\";\r\nimport {FormDataType} from \"../../../../components/Login/Login\";\r\n\r\ntype MatchParams = {\r\n    userId: string;\r\n}\r\n\r\nexport class ProfileContainer extends React.Component<ProfileContainerPropsType & RouteComponentProps<MatchParams>> {\r\n\r\n    refreshProfile() {\r\n        // userId - который в url\r\n        let userId: number | null = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    // все сайд-эффекты делаются в методе жизненного цикла - componentDidMount():\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileContainerPropsType & RouteComponentProps<MatchParams>, prevState: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profileContainer}>\r\n                <div className={s.profilePhoto}>\r\n                    <img src={photo} alt=\"Photo\"/>\r\n                </div>\r\n                < Profile\r\n                    {...\r\n                        this.props\r\n                    }\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType/* | null*/\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getUserStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n        saveProfile: saveProfileTC\r\n    }),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","reduxForm","form","initialValues","profile","handleSubmit","error","onSubmit","type","className","style","Field","placeholder","validate","required","name","component","Input","Textarea","maxLengthCreator","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","ProfileInfo","Preloader","src","photos","large","userPhoto","alt","target","files","length","savePhoto","formData","saveProfile","Post","message","likesCount","maxLength10","AddNewPostFormRedux","MyPosts","memo","postsElements","posts","el","id","values","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","photo","React","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","savePhotoTC","saveProfileTC","withRouter"],"sourceRoot":""}