{"version":3,"file":"static/js/549.0fcb5440.chunk.js","mappings":"6LACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA2G,0BAA3G,EAAsJ,gCAAtJ,EAA+L,wBCA/L,EAAyB,2BAAzB,EAA6D,2BAA7D,EAA+F,yBAA/F,EAAiI,2B,6BCSpHA,EAA4C,SAACC,GACtD,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAUC,IAAKC,EAAQC,IAAI,YAC3C,SAAC,KAAD,CAASC,GAAI,YAAcN,EAAMO,GAAIC,gBAAiBN,EAAUD,UAAWC,EAA3E,SAAoFF,EAAMS,WCbtG,EAA0B,yBCMbC,EAAsC,SAACV,GAChD,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMW,W,uCCHpCC,GAAeC,EAAAA,EAAAA,GAAiB,IAqBzBC,GAAsBC,EAAAA,EAAAA,GAA+B,CAACC,KAAM,wBAAtCD,EAnBL,SAACf,GAE3B,OACI,kBAAMiB,SAAUjB,EAAMkB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBH,KAAK,iBACLe,YAAY,0BAGpB,0BACI,oD,2CCbVC,EAAkB,SAACC,GAAD,MAAyC,CAC7DC,OAAQD,EAAME,KAAKD,SCsBvB,IAsBA,GALyBE,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAlBoB,SAACJ,GACrB,MAAO,CACHK,QAASL,EAAMM,YAAYD,QAC3BE,SAAUP,EAAMM,YAAYC,aAMT,SAACC,GACxB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAaD,UD/B3B,SAA6BE,GAUhC,OAFiCR,EAAAA,EAAAA,IAAQL,EAARK,EANP,SAAC9B,GACvB,IAAK2B,EAAwB3B,EAAxB2B,OAAWY,GAAhB,OAA6BvC,EAA7B,GACA,OAAK2B,GACE,SAACW,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUjC,GAAG,gBCgChBuB,ECtC6B,SAAC7B,GAEnD,IAAIwC,EAAkBxC,EAAM+B,QAAQU,KAAI,SAAAC,GAAE,OAAI,SAAC3C,EAAD,CAAwBU,KAAMiC,EAAGjC,KAAMF,GAAImC,EAAGnC,IAA7BmC,EAAGnC,OAC9DoC,EAAmB3C,EAAMiC,SAASQ,KAAI,SAAAC,GAAE,OACxC,iBAAKzC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAUC,IAAKC,EAAQC,IAAI,YAC3C,SAACK,EAAD,CAASC,QAAS+B,EAAG/B,YAFc+B,EAAGnC,OAU9C,OACI,iBAAKN,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKsC,KAEL,iBAAKvC,UAAWC,EAAhB,WACI,yBAAMyC,KACN,SAAC7B,EAAD,CAAqBG,SAXX,SAAC2B,GACnB5C,EAAMmC,WAAWS,EAASC,6B","sources":["webpack://samurai-way/./src/layout/main/dialogs/Dialogs.module.css?ceea","webpack://samurai-way/./src/layout/main/dialogs/dialogItem/DialogItem.module.css?c72f","layout/main/dialogs/dialogItem/DialogItem.tsx","webpack://samurai-way/./src/layout/main/dialogs/message/Message.module.css?0fbd","layout/main/dialogs/message/Message.tsx","layout/main/dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","layout/main/dialogs/DialogsContainer.tsx","layout/main/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__xpFx9\",\"dialogsItems\":\"Dialogs_dialogsItems__6+pxx\",\"messages\":\"Dialogs_messages__FDJw3\",\"messageWrapper\":\"Dialogs_messageWrapper__b-QFX\",\"avatar\":\"Dialogs_avatar__1sn2W\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__0jXHs\",\"avatar\":\"DialogItem_avatar__mO4F6\",\"link\":\"DialogItem_link__CTZzK\",\"active\":\"DialogItem_active__7vQ5v\"};","import s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport avatar from '../../../../assets/images/avatar1.png'\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img className={s.avatar} src={avatar} alt=\"avatar\"/>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active} className={s.link}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__QVksg\"};","import s from \"./Message.module.css\";\r\nimport React from \"react\";\r\nimport avatar from '../../../../assets/images/avatar1.png'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    // <div className={s.messageContainer}>\r\n    // {/*<img className={s.avatar} src={avatar} alt=\"avatar\"/>*/}\r\n    //\r\n    //     </div>\r\n    )\r\n}","import {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../../components/common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport {FormDataDialogsType} from \"../Dialogs\";\r\n\r\nconst maxLength50 =  maxLengthCreator(50);\r\n\r\nexport const AddMessageForm = (props: InjectedFormProps<FormDataDialogsType>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                    name=\"newMessageBody\"\r\n                    placeholder=\"Enter your message\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataDialogsType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateProps => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n\r\n    const RedirectComponent = (props: MapStateProps)=> {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import {\r\n    DialogsActionsType,\r\n    addMessageAC,\r\n    DialogType,\r\n    MessageType,\r\n} from \"../../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\n// create container component _DialogsContainer with the help of react-redux (function - connect()):\r\n\r\n// connect()() - двойные скобки означают, что мы вызвали ф-цию connect, а она вернула нам другую ф-цию, и мы вызываем потом ту ф-цию, которую вернул нам предыдущий вызов, и во вторые скобки мы передаем нашу презентационную компоненту (Dialogs), вокруг которой мы хотим создать контейнерную компоненту. То что мы делали вручную - _DialogsContainer, сейчас это делает connect().\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    // isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type NewDialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n// каждый раз как в стейте происходят изменения-запускается эта функция:\r\n// смысл этой ф-ции-замапить стэйт на пропсы, т.е. превратить часть стейта в пропсы.\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n//в пропсы попадут 2 колбэка, их мы будем отправлять в нашу презинтационную компоненту\r\nconst mapDispatchToProps = (dispatch: Dispatch<DialogsActionsType>): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (text: string)=> {\r\n            dispatch(addMessageAC(text));\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer;\r\n\r\n// ф-ция connect() создает контейнерную компоненту, внутри ее - она рендерит презентационную компоненту, и внутрь презентационной компоненты в качестве пропсов - передает те св-ва, которые сидят в этих 2-х объектах - которые возвращает f1() и f2().\r\n\r\n// мы говорим: эту презинтационную компоненту (Dialogs) законнекть к стору по этим правилам: (mapStateToProps, mapDispatchToProps)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport avatar from \"../../../assets/images/avatar1.png\";\r\nimport {NewDialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type FormDataDialogsType = { newMessageBody: string }\r\n\r\nexport const Dialogs: React.FC<NewDialogsPropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(el => <DialogItem key={el.id} name={el.name} id={el.id}/>)\r\n    let messagesElements = props.messages.map(el =>\r\n        <div className={s.messageWrapper} key={el.id}>\r\n            <img className={s.avatar} src={avatar} alt=\"avatar\"/>\r\n            <Message message={el.message}/>\r\n        </div>\r\n    )\r\n\r\n    const addNewMessage = (formData: FormDataDialogsType) => {\r\n        props.addMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};"],"names":["DialogItem","props","className","s","src","avatar","alt","to","id","activeClassName","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","mapStateToProps","state","isAuth","auth","compose","connect","dialogs","dialogsPage","messages","dispatch","addMessage","text","addMessageAC","Component","restProps","dialogsElements","map","el","messagesElements","formData","newMessageBody"],"sourceRoot":""}