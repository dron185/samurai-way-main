{"version":3,"file":"static/js/410.8e492d81.chunk.js","mappings":"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","sources":["layout/main/profile/Profile.module.css","webpack://samurai-way/./src/layout/main/profile/profileInfo/ProfileInfo.module.css?2ad6","layout/main/profile/profileInfo/ProfileStatusWiyhHooks.tsx","layout/main/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/layout/main/profile/myPosts/MyPosts.module.css?6aa5","webpack://samurai-way/./src/layout/main/profile/myPosts/post/Post.module.css?004b","layout/main/profile/myPosts/post/Post.tsx","layout/main/profile/myPosts/MyPosts.tsx","layout/main/profile/myPosts/MyPostsContainer.tsx","layout/main/profile/Profile.tsx","layout/main/profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__F6H+d\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__gp86+\",\"profilePhoto\":\"ProfileInfo_profilePhoto__giXiE\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__BdY2B\",\"header\":\"ProfileInfo_header__t-mlf\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype Props = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: Props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}\r\n                        autoFocus={true}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport photo from '../../../../assets/images/leaves-1350175_1920.jpg'\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../../components/preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWiyhHooks\";\r\n\r\ntype Props = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: Props) => {\r\n    //если props.profile==null || props.profile==undefined-сокращенно:\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const info = [\r\n        {title: 'About me: ', value: props.profile.aboutMe},\r\n        {title: 'Full name: ', value: props.profile.fullName},\r\n        {title: 'Looking for a job description: ', value: props.profile.lookingForAJobDescription},\r\n        {title: 'Contacts: ', value: ''},\r\n        {title: 'Facebook: ', value: props.profile.contacts.facebook},\r\n        {title: 'Github: ', value: props.profile.contacts.github},\r\n        {title: 'Twitter: ', value: props.profile.contacts.twitter},\r\n        {title: 'Instagram: ', value: props.profile.contacts.instagram},\r\n        {title: 'VK: ', value: props.profile.contacts.vk},\r\n        {title: 'Youtube: ', value: props.profile.contacts.youtube},\r\n        {title: 'Website: ', value: props.profile.contacts.website},\r\n        {title: 'Main link: ', value: props.profile.contacts.mainLink},\r\n        {title: 'Looking for a job: ', value: props.profile.lookingForAJob}\r\n    ];\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.profilePhoto}>\r\n                <img src={photo} alt=\"Photo\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=\"avatar\"/>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                {info.map(el => <div><span className={s.header}>{el.title}</span>{el.value}</div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__nmRx3\",\"postsTitle\":\"MyPosts_postsTitle__yUp3G\",\"postWrapper\":\"MyPosts_postWrapper__Na3HO\",\"posts\":\"MyPosts_posts__KwDaJ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rqBl2\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://i.pinimg.com/564x/1e/d3/0d/1ed30d98f49be532ae58c62f33677b16.jpg\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './post/Post'\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../components/common/FormsControls/FormsControls\";\r\n\r\n//Презентационные компоненты занимаются отображением UI.\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\ntype FormDataType = { newPostText: string }\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form className={s.postWrapper} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={\"Post message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n\r\nexport const MyPosts = memo((props : MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(el =>\r\n        <Post key={el.id} message={el.message} likesCount={el.likesCount}/>)\r\n\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addNewPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className={s.postsTitle}>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {\r\n    addPostAC,\r\n    addPostActionType,\r\n    PostType\r\n} from \"../../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//Контейнерные компоненты занимаются управлением состоянием и логикой.\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<addPostActionType>): MapDispatchToPropsType => {\r\n    return {\r\n        addNewPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./myPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype Props = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, ProfileType, updateStatusTC} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MatchParams = {\r\n    userId: string;\r\n}\r\n\r\nexport class ProfileContainer extends React.Component<ProfileContainerPropsType & RouteComponentProps<MatchParams>> {\r\n    // все сайд-эффекты делаются в методе жизненного цикла - componentDidMount():\r\n    componentDidMount() {\r\n        // userId - который в url\r\n        let userId: number | null = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n        />\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getUserStatus: getStatusTC,\r\n        updateStatus: updateStatusTC\r\n    }),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","Preloader","info","title","aboutMe","fullName","lookingForAJobDescription","contacts","facebook","github","twitter","instagram","vk","youtube","website","mainLink","lookingForAJob","className","s","src","photo","alt","photos","large","map","el","Post","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPosts","memo","postsElements","posts","id","values","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","React","compose","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","withRouter"],"sourceRoot":""}